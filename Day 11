# Two sum solution
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        num_map=dict()
        for i in range(len(nums)):
            complement=target-nums[i]
            if (complement in num_map):
                return [num_map[complement],i]
            else:
                num_map[nums[i]]=i
                print(num_map)
                
 #problem 2
 
 class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        mappings = {"2":"abc","3":"def","4":"ghi","5":"jkl","6":"mno","7":"pqrs","8":"tuv","9":"wxyz"}
        result=[]
        
        def backtrack(i,curstr):
            if (len(curstr)==len(digits)):
                result.append(curstr)
                return
            
            for c in mappings[digits[i]]:
                backtrack(i+1,curstr + c)
                
        if digits:
                backtrack(0,"")
        return result
